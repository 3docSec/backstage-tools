#!/usr/bin/env python3

import sys
import json
import argparse
import datetime
import os.path
from github import Github
from github import Auth

gh_token = os.getenv("GITHUB_ACCESS_TOKEN")
if not gh_token:
  print("Github token not found.\nGenerate one at https://github.com/settings/tokens and set it to the GITHUB_ACCESS_TOKEN environment variable")
  exit(1)

g = Github(auth=Auth.Token(gh_token))
handles = {}
disputed_reports = set()

BASE = 0.85 # Base for Sybil protection. Was once 0.9 but 0.85 since Jul 2024

parser = argparse.ArgumentParser(prog="c4-review", formatter_class=argparse.RawTextHelpFormatter,
                                 description="Analyzes the GitHub findings repo and provides stats. Estimates payout if you provide a handle")
subp = parser.add_subparsers(dest="command") # dest="command" means that we see which command was parsed

base_help = f"Change base (default {BASE}) for Sybil protection e.g. --base=0.9 (for old comps)"

payout = subp.add_parser("payouts", description="Find out the fraction of total pot or payouts")
payout.add_argument('findings_repo', type=str)
payout.add_argument('pot_size', type=int, nargs='?')
payout.add_argument('-w', '--handle', type=str, nargs='?')
payout.add_argument('-b', '--base', type=str, nargs=1, help=base_help)

findings = subp.add_parser("findings", description="Summary of findings, including duplicate counts")
findings.add_argument('findings_repo', type=str)
findings.add_argument('pot_size', type=int, nargs='?')
findings.add_argument('-b', '--base', type=str, nargs=1, help=base_help)


def get_participants_from_gh(repo):
  # build issue-to-handle map
  b = repo.get_branch(repo.default_branch)
  t = repo.get_git_tree(b.commit.sha, recursive=True)

  for content in t.tree:
    if content.path.endswith(".json"):
      handle, issue_id = content.path.split("/")[-1].replace(".json", "").rsplit("-", 1)
      handles[issue_id] = handle

def get_records_from_gh(ns, repo):
  issues = repo.get_issues(state="all")
  ret = []
  unsatisfactory_issues = set()
  for i in issues:
    if 'unsatisfactory' in [label.name for label in i.labels]:
      unsatisfactory_issues.add(str(i.number))

  for i in issues:
    duplicate_of = ""
    issue_id = str(i.number)
    report_id = issue_id
    severity = None
    skip = False
    percentage = 100

    for l in i.labels:
      if l.name.startswith("duplicate-"):
        duplicate_of = l.name.replace("duplicate-", "")
        report_id = duplicate_of
        if duplicate_of in unsatisfactory_issues:
          skip = True
      elif l.name == "2 (Med Risk)":
        severity = "M"
      elif l.name == "3 (High Risk)":
        severity = "H"
      elif l.name in ['unsatisfactory', 'withdrawn by warden', 'withdrawn by judge',
                      'nullified', 'ineligible for award']:
        skip = True
      elif l.name.startswith("partial-"):
        percentage = int(l.name.split("-")[1])

    if skip or severity is None:
      continue

    ret.append({
      "issueId": issue_id,
      "reportId": report_id,
      "duplicateOf": duplicate_of,
      "severity": severity,
      "handle": handles.get(issue_id, "unknown"),
      "percentage": percentage
    })

  return ret

def pp_usd(n):
  return '${:0,.2f}'.format(round(n, 2))

def pp_month(epoch_time):
  dt = datetime.datetime.fromtimestamp(epoch_time)
  return dt.strftime("%B %Y")

def pp_time(epoch_time):
  dt = datetime.datetime.fromtimestamp(epoch_time)
  return dt.isoformat()

def is_high(s):
  return s["severity"] == "H"

def is_medium(s):
  return s["severity"] == "M"

def get_issue_summary(ns):
  repo = g.get_repo(f"code-423n4/{ns.findings_repo}")
  get_participants_from_gh(repo)
  rs = get_records_from_gh(ns, repo)

  dup_sets = {}
  for r in rs:
    id = r["reportId"]
    if not id in dup_sets:
      dup_sets[id] = { "id": id, "dups": 0, "leadFinding": "unknown", "handles": [], "findings": [] }
    if r["duplicateOf"] == "":
      dup_sets[id]["severity"] = r["severity"]
      dup_sets[id]["leadFinding"] = r["handle"]
      dup_sets[id]["githubIssueId"] = r["issueId"]
    if not r["handle"] in dup_sets[id]["handles"]:
      dup_sets[id]["dups"] += 1
      dup_sets[id]["handles"].append(r["handle"])
      # Assumes no warden will get multiple duplicates of the same finding with different partial credit
      dup_sets[id]["findings"].append({ "handle": r["handle"], "percentage": r["percentage"], "issueId": r["issueId"] })

  ## Calculate shares
  total_shares = 0.0
  for id in dup_sets:
    num_dups = dup_sets[id]["dups"]
    base_shares = 10 if is_high(dup_sets[id]) else 3
    group_shares = base_shares * BASE**(num_dups - 1) * (num_dups + 0.3) / num_dups # including 30% selected for report bonus

    total_credit = 0.0
    for finding in dup_sets[id]["findings"]:
      if finding["handle"] == dup_sets[id]["leadFinding"]:
        finding["sliceCredit"] = 1.3
      else:
        finding["sliceCredit"] = finding["percentage"] / 100.0
      total_credit += finding["sliceCredit"]

    for finding in dup_sets[id]["findings"]:
      finding["shares"] = group_shares * (finding["sliceCredit"] / total_credit)
      total_shares += finding["shares"]

  # A pass to calculate fractions and payouts
  for id in dup_sets:
    for finding in dup_sets[id]["findings"]:
      finding["fraction"] = finding["shares"] / total_shares
      if ns.pot_size != None:
        finding["payout"] = finding["fraction"] * ns.pot_size * 0.8 # remove bonuses

  return { "totalShares": total_shares, "issueMap": dup_sets }

def payout(ns):
  issue_summary = get_issue_summary(ns)
  h = issue_summary["issueMap"]

  # Summarise results for each handle
  ws = {}
  for id in h:
    for finding in h[id]["findings"]:
      w = finding["handle"]
      if not w in ws:
        ws[w] = { "rank": 0, "handle": w }
        if ns.pot_size != None:
          ws[w]["payout"] = 0.0
        ws[w].update({ "findings": [], "findingsCount": 0, "fraction": 0.0 })

      is_lead_finding = h[id]["leadFinding"] == w
      rec = { "findingId": finding["issueId"],
        "isLeadFinding": is_lead_finding,
        "leadFindingId" : h[id]["githubIssueId"],
        "severity": h[id]["severity"],
        "dups": h[id]["dups"],
        "sliceCredit": finding["sliceCredit"],
        "shares": finding["shares"]
      }
      ws[w]["findings"].append(rec)

      ws[w]["fraction"] += finding["fraction"]
      if ns.pot_size != None:
        rec["payout"] = finding["payout"]
        ws[w]["payout"] += finding["payout"]

  for w in ws:
    ws[w]["findingsCount"] = len(ws[w]["findings"])
    ws[w]["findings"].sort(key=lambda r: -r["shares"])

  # Calculate bonuses
  gatherers, highest_gatherer_score = ([], 0)
  hunters, highest_hunter_score = ([], 0)
  num_highs = sum(h[id]["severity"] == "H" for id in h)
  num_mediums = sum(h[id]["severity"] == "M" for id in h)

  for w in ws:
    gatherer_score = 0
    hunter_score = 0
    for f in ws[w]["findings"]:
      severity_score = 10 if is_high(f) else 3
      total_severity_findings = num_highs if is_high(f) else num_mediums
      # Partial dupes either only get partial credit towards the TH/TG scoring
      # (see https://discord.com/channels/810916927919620096/976603323450941440/1257966110376984658)
      # or none (https://docs.code4rena.com/awarding/incentive-model-and-awards#bonuses-for-top-competitors)
      # Going with the first here
      partial_weighting = min(f["sliceCredit"], 1)
      gatherer_score += severity_score / total_severity_findings * partial_weighting
      if f["dups"] < 5:
        hunter_score += severity_score / f["dups"] * partial_weighting

    ws[w]["gathererScore"] = gatherer_score
    if gatherer_score > highest_gatherer_score:
      highest_gatherer_score = gatherer_score
      gatherers = [w]
    elif gatherer_score == highest_gatherer_score:
      gatherers.append(w)

    ws[w]["hunterScore"] = hunter_score
    if hunter_score > highest_hunter_score:
      highest_hunter_score = hunter_score
      hunters = [w]
    elif hunter_score == highest_hunter_score:
      hunters.append(w)

  bonus = ns.pot_size * 0.1 if ns.pot_size != None else 0.1
  for role, winners in [("hunter", hunters), ("gatherer", gatherers)]:
    for winner in winners:
      ws[winner][f"{role}Bonus"] = round(bonus / len(winners), 2)
      if ns.pot_size != None:
        ws[winner]["payout"] += bonus / len(winners)

  # Prepare and format warden summaries for output
  warden_summaries = [ws[w] for w in ws if (lambda w: ns.handle == None or w == ns.handle)(w)]
  if ns.pot_size != None:
    warden_summaries.sort(key=lambda r: -r["payout"])
  else: # should be the same
    warden_summaries.sort(key=lambda r: -(r["fraction"] * 0.8 + r.get("hunterBonus", 0) + r.get("gathererBonus", 0)))

  for i in range(len(warden_summaries)):
    warden_summaries[i]['rank'] = i + 1
    if ns.pot_size != None:
      warden_summaries[i]['payout'] = round(warden_summaries[i]['payout'], 2)
      for finding in warden_summaries[i]['findings']:
        finding['payout'] = round(finding['payout'], 2)

  return { "totalShares": issue_summary["totalShares"], "payouts": warden_summaries }

def findings(ns):
  issue_summary = get_issue_summary(ns)
  h = issue_summary["issueMap"]
  for id in h:
    if "payoutPerDup" in h[id]:
      h[id]["payoutPerDup"] = pp_usd(h[id]["payoutPerDup"])
  rs = [h[k] for k in h]
  rs.sort(key=lambda r: r["id"])
  return { "totalShares": issue_summary["totalShares"], "findings": rs }

ns = parser.parse_args(sys.argv[1:])

#
# Set the base if the -b, --base flag is provided
# or the csv_file if it is provided
#
def set_base(base):
  global BASE
  if base != None:
    BASE = float(base[0])
  else:
    BASE = 0.85

set_base(ns.base)

if ns.command == "payouts":
  result = payout(ns)
elif ns.command == "findings":
  result = findings(ns)
else:
  parser.parse_args(["--help"])

result["note"] = ("This tool only calculates shares for Highs and Mediums. " +
                  "It does not take into account QA reports.")

## Prints the records as valid JSON
print(json.dumps(result, indent=2))
