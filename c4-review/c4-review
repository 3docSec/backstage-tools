#!/usr/bin/env python3

import sys
import json
import argparse
import datetime
import os.path
from github import Github
from github import Auth

gh_token = os.getenv("GITHUB_ACCESS_TOKEN")
if not gh_token:
  print("Github token not found.\nGenerate one at https://github.com/settings/tokens and set it to the GITHUB_ACCESS_TOKEN environment variable")
  exit(1)

g = Github(auth=Auth.Token(gh_token))
handles = {}
disputed_reports = set()

BASE = 0.6 # Base for Sybil protection. Was once 0.9 but 0.6 since Oct 2022

parser = argparse.ArgumentParser(prog="c4-review", formatter_class=argparse.RawTextHelpFormatter,
                                  description="Analyzes the GitHub findings repo and provides stats. Estimates payout if you provide a handle")
subp = parser.add_subparsers(dest="command") # dest="command" means that we see which command was parsed

base_help = f"Change base (default {BASE}) for Sybil protection e.g. --base=0.9 (for old comps)"

payout = subp.add_parser("payouts", description="Find out the fraction of total pot or payouts")
payout.add_argument('findings_repo', type=str)
payout.add_argument('pot_size', type=int, nargs='?')
payout.add_argument('-w', '--handle', type=str, nargs='?')
payout.add_argument('-b', '--base', type=str,nargs=1, help=base_help)

findings = subp.add_parser("findings", description="Summary of findings, including duplicate counts")
findings.add_argument('findings_repo', type=str)
findings.add_argument('pot_size', type=int, nargs='?')
findings.add_argument('-b', '--base', type=str,nargs=1, help=base_help)

#
# Functions

def get_participants_from_gh(repo):
  # build issue-to-handle map
  b = repo.get_branch(repo.default_branch)
  t = repo.get_git_tree(b.commit.sha, recursive=True)

  for content in t.tree:
    if content.path.endswith(".json"):
      handle, issueId = content.path.split("/")[-1].replace(".json", "").rsplit("-", 1)
      handles[issueId] = handle

def get_records_from_gh(ns, repo):
  issues = repo.get_issues(state="all")
  ret = []
  unsatisfactory_issues = set()
  for i in issues:
    if 'unsatisfactory' in [label.name for label in i.labels]:
      unsatisfactory_issues.add(str(i.number))

  # headers = ["reportId", "duplicateOf", "score", "risk", "handle", "title", "issueId", "issueUrl", "gh_Risk", "gh_isOpen", "gh_isDuplicate", "gh_isInvalid"]
  for i in issues:
    duplicateOf = ""
    issueId = str(i.number)
    reportId = issueId
    severity = None
    skip = False
    percentage = 100

    for l in i.labels:
      if l.name.startswith("duplicate-"):
        duplicateOf = l.name.replace("duplicate-", "")
        reportId = duplicateOf
        if duplicateOf in unsatisfactory_issues:
          skip = True
      elif l.name == "2 (Med Risk)":
        severity = "M"
      elif l.name == "3 (High Risk)":
        severity = "H"
      elif l.name in ['unsatisfactory', 'withdrawn by warden']:
        skip = True

    if skip or severity is None:
      continue

    ret.append({
      "issueId": issueId,
      "reportId": reportId,
      "duplicateOf": duplicateOf,
      "severity": severity,
      "handle": handles.get(issueId, "unknown"),
      "percentage": percentage
    })

  return ret

def ppUSD(n):
  return '${:0,.2f}'.format(round(n, 2))

def ppMonth(epochTime):
  dt = datetime.datetime.fromtimestamp(epochTime)
  return dt.strftime("%B %Y")

def ppTime(epochTime):
  dt = datetime.datetime.fromtimestamp(epochTime)
  return dt.isoformat();

def isHigh(s):
  return s["severity"] == "H"

def isMedium(s):
  return s["severity"] == "M"

def getIssueSummary(ns):
  repo = g.get_repo(f"code-423n4/{ns.findings_repo}")
  get_participants_from_gh(repo)
  rs = get_records_from_gh(ns, repo)

  h = {}
  for r in rs:
    id=r["reportId"]
    # if id in disputed_reports:
    #   continue
    if not id in h:
      h[id] = { "id": id, "dups": 0, "leadFinding": "unknown", "handles": [], "severity": r["severity"], "percentage": r["percentage"] }
    if r["duplicateOf"] == "":
      h[id]["leadFinding"] = r["handle"]
      h[id]["githubIssueId"] = r["issueId"]
    if not r["handle"] in h[id]["handles"]:
      h[id]["dups"] += 1
      h[id]["handles"].append(r["handle"])

  ## Calculate shares
  totalShares = 0.0
  for key in h:
    baseShares = 10.0 if isHigh(h[key]) else 3.0
    dups = h[key]["dups"]
    h[key]["sharesForIssue"] = baseShares * BASE**(dups - 1)
    h[key]["sharesPerDup"] = h[key]["sharesForIssue"] / dups
    # also include the 30% bonus to the finding selected for report
    totalShares += h[key]["sharesForIssue"] + h[key]["sharesPerDup"] * 0.3

  # A pass to calculate fractions and payouts
  for key in h:
    h[key]["fractionPerDup"] = h[key]["sharesPerDup"] / totalShares
    if ns.pot_size != None:
      h[key]["payoutPerDup"] = h[key]["fractionPerDup"] * ns.pot_size * 0.8 # remove bonuses
  return { "totalShares": totalShares, "issueMap": h }

def payout(ns):
  issueSummary = getIssueSummary(ns)

  h = issueSummary["issueMap"]
  # Summarise results for each handle
  ws = {}
  for id in h:
    # if id == "529" or h[id]["leadFinding"] == "529":
    #   continue
    for w in h[id]["handles"]:
      if not w in ws:
        ws[w] = { "handle": w, "findings": [], "fraction": 0.0 }
        if ns.pot_size != None:
          ws[w]["payout"] = 0.0
      isLeadFinding = h[id]["leadFinding"] == w
      rec = { "id": id, "dups": h[id]["dups"], "sharesPerDup": h[id]["sharesPerDup"], "fractionPerDup": h[id]["fractionPerDup"], "isLeadFinding": isLeadFinding, "severity": h[id]["severity"] }
      if ns.pot_size != None:
        rec["payoutPerDup"] = h[id]["payoutPerDup"]
      ws[w]["findings"].append(rec)

      factor = h[id]["percentage"] / 100.0
      if isLeadFinding:
        factor = 1.3 # 30% shares bonus

      ws[w]["fraction"] += h[id]["fractionPerDup"] * factor
      if ns.pot_size != None:
        ws[w]["payout"] += h[id]["payoutPerDup"] * factor

  for w in ws:
      ws[w]["findingsCount"] = len(ws[w]["findings"])

  if ns.pot_size != None:
    for w in ws:
      ws[w]["payout"]
      ws[w]["findings"].sort(key=lambda r: r["id"])

  # bonuses
  gatherers, highestGathererScore = ([], 0)
  hunters, hunterBestScore = ([], 0)

  totalHighRiskFindings = sum(f["severity"] == "H" for w in ws for f in ws[w]["findings"])
  totalMediumRiskFindings = sum(f["severity"] == "M" for w in ws for f in ws[w]["findings"])

  for w in ws:
    # gatherer
    highRiskFindings = sum(f["severity"] == "H" for f in ws[w]["findings"])
    mediumRiskFindings = sum(f["severity"] == "M" for f in ws[w]["findings"])
    
    highScore = 10 * highRiskFindings / totalHighRiskFindings if totalHighRiskFindings else 0
    mediumScore = 3 * mediumRiskFindings / totalMediumRiskFindings if totalMediumRiskFindings else 0
    
    gathererScore = highScore + mediumScore
    ws[w]["gathererScore"] = gathererScore

    if gathererScore > highestGathererScore:
      highestGathererScore = gathererScore
      gatherers = [w]
    elif gathererScore == highestGathererScore:
      gatherers.append(w)

    wScore = 0
    for f in ws[w]["findings"]:
      if f["dups"] < 5:  # Only count findings with fewer than 5 submissions
        if f["severity"] == "H":
          wScore += 10 * (1 / f["dups"])
        elif f["severity"] == "M":
          wScore += 3 * (1 / f["dups"])

    ws[w]["hunterScore"] = wScore
    if wScore > hunterBestScore:
      hunterBestScore = wScore
      hunters = [w]
    elif wScore == hunterBestScore:
      hunters.append(w)

  bonus = ns.pot_size * 0.1
  for hunter in hunters:
    ws[hunter]["payout"] += bonus / len(hunters)
    ws[hunter]["hunterBonus"] = bonus / len(hunters)

  for gatherer in gatherers:
    ws[gatherer]["payout"] += bonus / len(gatherers)
    ws[gatherer]["gathererBonus"] = bonus / len(gatherers)

  wardenSummaries = [ws[w] for w in ws if (lambda w: ns.handle == None or w == ns.handle)(w)]
  wardenSummaries.sort(key=lambda r: -r["payout"])

  for i in range(len(wardenSummaries)):
    wardenSummaries[i]['rank'] = i + 1

  rs = { "totalShares": issueSummary["totalShares"], "payouts": wardenSummaries }
  return rs

def findings(ns):
  issueSummary = getIssueSummary(ns)
  h = issueSummary["issueMap"]
  for id in h:
    if "payoutPerDup" in h[id]:
      h[id]["payoutPerDup"] = ppUSD(h[id]["payoutPerDup"])
  rs = [h[k] for k in h]
  rs.sort(key=lambda r: r["id"])
  return { "totalShares": issueSummary["totalShares"], "findings": rs }

ns = parser.parse_args(sys.argv[1:])

#
# Set the base if the -b, --base flag is provided
# or the csv_file if it is provided
#
def set_base(base):
  global BASE
  if base != None:
    BASE = float(base[0])
  else:
    BASE=0.9

set_base(ns.base)

if ns.command == "payouts":
  result=payout(ns)
elif ns.command == "findings":
  result=findings(ns)
else:
  parser.parse_args(["--help"])


result["note"] = ("This tool only calculates shares for Highs and Mediums and will overestimate " +
                    "a little. It does not take into account QA reports.")

## Prints the records as valid JSON
print(json.dumps(result, indent=2))
